esphome:
  name: wifi-arduino-85
  friendly_name: Wifi Arduino 85
  comment: Armtronix Wifi Arduino 85 V0.4
  project:
    name: "Armtronix.Wifi-Arduino-85"
    version: "0.4"
  includes:
    - uart_read_line_sensor.h

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG

# Debug Component
debug:
  update_interval: 5s

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !ota_password

wifi:
  fast_connect: true
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Wifi Arduino 85 Fallback Hotspot"
    password: !secret wifi_ap_password

captive_portal:

web_server:
  port: 80
  local: true
  auth:
    username: !secret web_server_username
    password: !secret web_server_password

# To use i2c on spare GPIO pins, Remove `status_led` section
#i2c:
#  scl: GPIO2
#  sda: GPIO0

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 4800
  debug:
    direction: BOTH
    after:
      delimiter: "\n\r"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

light:
  - platform: status_led
    name: Status LED
    pin:
      number: GPIO2
      inverted: true

sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: WiFi Signal dB
    id: wifi_signal_db
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: WiFi Signal Percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: '%'
    entity_category: diagnostic

switch:
  - platform: template
    name: "Relay"
    icon: "mdi:electric-switch"
    lambda: |-
      if (id(uart_readline).state == "Relay on") {
        return true;
      } else if(id(uart_readline).state == "Relay off") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "+ATon" # Can also be "+ATturn_on"
    turn_off_action:
      - uart.write: "+ATof" # Can also be "+ATturn_off"

  - platform: template
    name: "Sensor"
    icon: "mdi:motion-sensor"
    lambda: |-
      if (id(uart_readline).state == "Sensor Enb") {
        return true;
      } else if(id(uart_readline).state == "Sensor Dis") {
        return false;
      } else {
        return {};
      }
    turn_on_action:
      - uart.write: "+ATstart"
    turn_off_action:
      - uart.write: "+ATstop"

text_sensor:
  - platform: custom
    lambda: |-
      auto uartReadLineSensor = new UartReadLineSensor(id(uart_bus));
      App.register_component(uartReadLineSensor);
      return {uartReadLineSensor};
    text_sensors:
      name: Status
      id: "uart_readline"

  - platform: wifi_info
    ip_address:
      name: IP Address
    mac_address:
      name: Mac Address
    ssid:
      name: Connected SSID
